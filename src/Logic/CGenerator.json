[
  {
    "header":"#include <stdio.h>\n#include <stdlib.h>\n",
    "structure":"struct Node{\n    int val;\n    struct Node *left;\n    struct Node *right;\n}\n\n",
    "createNode":"struct Node *createNode(int data){\n    struct Node *newnode = (struct Node *) malloc(sizeof(struct Node));\n      newnode->data = data;\n      newnode->left = NULL;\n      newnode->right = NULL;\n      return newnode;\n}",
    "preOrderTraversal":"void preOrderTraversal(struct Node *root){\n    if(root!=NULL){        \n        printf(\"%d \", root->data);\n        inOrderTraversal(root->left);    \n        inOrderTraversal(root->right);\n    }\n    printf(\"\\n\");\n}\n",
    "inOrderTraversal":"void inOrderTraversal(struct Node *root){\n    if(root!=NULL){\n        inOrderTraversal(root->left);\n        printf(\"%d \", root->data);\n        inOrderTraversal(root->right);\n    }\n    printf(\"\\n\");\n}\n",
    "postOrderTraversal":"void postOrderTraversal(struct Node *root){\n      if(root!=NULL){\n        postOrderTraversal(root->left);\n            postOrderTraversal(root->right);\n            printf(\"%d\", root->data);\n      }\n    printf(\"\\n\");\n}\n",
    "invertBinaryTree":"void InvertBinaryTree(struct Node *node){\n\n  if(node != NULL){\n    InvertBinaryTree(node->left);\n    InvertBinaryTree(node->right);\n\n    struct Node *temp = node->left;\n    node->left = node->right;\n    node->right = temp;\n  }\n\n}\n",
    "nodePointerDeclaration":"struct Node *",
    "nodeLeft":"->left = ",
    "nodeRight":"->right = ",
    "startComment":"/*  Do not make changes to the below code */",
    "endComment":"/* ------------------------------------------- */"
  }
]
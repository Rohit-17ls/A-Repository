[{"D:\\___TransferredFromMusic\\01-starting-project\\src\\index.js":"1","D:\\___TransferredFromMusic\\01-starting-project\\src\\App.js":"2","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Navbar.js":"3","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeParentBody.js":"4","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeRow.js":"5","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNodePair.js":"6","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNode.js":"7","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Button.js":"8","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeSandwich.js":"9","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\Line.js":"10","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Message.js":"11","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Dashboard.js":"12","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\UserConsole.js":"13","D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\TreeMethods.js":"14","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Copy.js":"15","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Spinner.js":"16","D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\CDriver.js":"17","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\DummyData.js":"18"},{"size":169,"mtime":1643978355507,"results":"19","hashOfConfig":"20"},{"size":8712,"mtime":1647960849178,"results":"21","hashOfConfig":"20"},{"size":697,"mtime":1646927295283,"results":"22","hashOfConfig":"20"},{"size":326,"mtime":1644935342326,"results":"23","hashOfConfig":"20"},{"size":937,"mtime":1646059411151,"results":"24","hashOfConfig":"20"},{"size":1178,"mtime":1646703909015,"results":"25","hashOfConfig":"20"},{"size":535,"mtime":1646927290612,"results":"26","hashOfConfig":"20"},{"size":320,"mtime":1645940960748,"results":"27","hashOfConfig":"20"},{"size":534,"mtime":1644935342327,"results":"28","hashOfConfig":"20"},{"size":5007,"mtime":1645945398035,"results":"29","hashOfConfig":"20"},{"size":226,"mtime":1645944036579,"results":"30","hashOfConfig":"20"},{"size":1217,"mtime":1647313128723,"results":"31","hashOfConfig":"20"},{"size":968,"mtime":1647960063249,"results":"32","hashOfConfig":"20"},{"size":4466,"mtime":1647344642037,"results":"33","hashOfConfig":"20"},{"size":490,"mtime":1647481697272,"results":"34","hashOfConfig":"20"},{"size":181,"mtime":1646927769917,"results":"35","hashOfConfig":"20"},{"size":239,"mtime":1647311575841,"results":"36","hashOfConfig":"20"},{"size":4827,"mtime":1647960785094,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11cymbo",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\___TransferredFromMusic\\01-starting-project\\src\\index.js",[],["78","79"],"D:\\___TransferredFromMusic\\01-starting-project\\src\\App.js",["80","81","82","83","84","85","86","87"],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Navbar.js",["88"],"import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport Button from './Button';\r\n\r\nconst Navbar = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.navbar}>\r\n                <span>Broccoli <small style={{fontSize:'0.7em'}}>by Unamed Inc</small></span>\r\n            {/* <Button type=\"button\" onClick={props.addRow}>Add new row</Button>\r\n            <Button type=\"button\" onClick={props.toggleNullState}>{props.nullState} Empty Nodes</Button>\r\n            <Button type=\"button\" onClick={props.invertBinaryTree}>Invert Binary Tree</Button> */}\r\n            </div>\r\n            \r\n        \r\n        </>\r\n    \r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default Navbar;","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeParentBody.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeRow.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNodePair.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNode.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Button.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeSandwich.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\Line.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Message.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Dashboard.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\UserConsole.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\TreeMethods.js",["89"],"import {tree} from \"../App\";\r\n\r\nexport const func = (opt) => {\r\n    \r\n    let  nodeLeftPos, nodeRightPos, nodes = [];\r\n    let res = [];\r\n    let count = 0;\r\n    \r\n\r\n\r\n    class Node{\r\n        constructor(value){\r\n            this.value = value;\r\n            this.left = null;\r\n            this.right = null;\r\n        }\r\n    }\r\n    \r\n    class BinarySearchTree{\r\n        constructor(arr){\r\n            this.arr = arr;\r\n            this.root = new Node(arr[0]);\r\n    \r\n        \r\n        }\r\n    \r\n        Validate(node = this.root){\r\n            count++;\r\n            console.log(`Left : ${node.left.value} Right : ${node.right.value}`);\r\n            if(node.left.value < node.right.value){\r\n                this.Validate(node.left);\r\n                this.Validate(node.right);\r\n                \r\n            }else{\r\n                return [0,count];\r\n            }\r\n            return [1,1];\r\n        }\r\n\r\n        InorderTraversal(node = this.root){\r\n            \r\n            if(node.value !== 0){\r\n                this.InorderTraversal(node.left);\r\n                // console.log(node.value);\r\n                res.push(node.value);\r\n                this.InorderTraversal(node.right);\r\n            }\r\n    \r\n            \r\n        }\r\n\r\n        PostorderTraversal(node = this.root){\r\n            if(node.value !== 0){\r\n                this.PreorderTraversal(node.left);\r\n                this.PreorderTraversal(node.right);\r\n                // console.log(node.value);\r\n                res.push(node.value);\r\n            }\r\n        }\r\n\r\n        PreorderTraversal(node = this.root){\r\n            if(node.value !== 0){\r\n                // console.log(node.value);\r\n                res.push(node.value);\r\n                this.PostorderTraversal(node.left);\r\n                this.PostorderTraversal(node.right);\r\n            }\r\n        }\r\n    \r\n    \r\n        start(){\r\n            \r\n            \r\n            for(let x of this.arr.slice(1,)){\r\n                nodes.push(new Node(x));\r\n            }\r\n    \r\n            nodes = [this.root, ...nodes];\r\n    \r\n            this.root.left = nodes[1];\r\n            this.root.right = nodes[2];\r\n    \r\n            nodeLeftPos = 3;\r\n            nodeRightPos = 4;\r\n    \r\n        }\r\n    \r\n        init(){\r\n    \r\n    \r\n            let counter = 1;\r\n            while(nodeRightPos<nodes.length){\r\n                nodes[counter].left = nodes[nodeLeftPos];\r\n                nodes[counter].right = nodes[nodeRightPos];\r\n                nodeLeftPos += 2;\r\n                nodeRightPos += 2;\r\n                counter++;\r\n            }\r\n    \r\n            \r\n            \r\n        }\r\n    }\r\n    let ele = (Object.values(tree)).map(x => x.value);\r\n    \r\n    let Tree = new BinarySearchTree(ele);\r\n    Tree.start();\r\n    Tree.init();\r\n    \r\n    console.log(nodes);\r\n    \r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            if((Tree.Validate())[0]){\r\n                switch(opt){\r\n                    case 1:\r\n                        console.log(\"Inorder Traversal\");\r\n                        Tree.InorderTraversal();\r\n                        break;\r\n                    case 2:\r\n                        console.log(\"Preorder Traversal\");\r\n                        Tree.PreorderTraversal();\r\n                        break;\r\n                    case 3:\r\n                        console.log(\"Postorder Traversal\");\r\n                        Tree.PostorderTraversal();\r\n                        break;\r\n                }\r\n    \r\n                resolve([1,res]);\r\n    \r\n            }else{\r\n                resolve([0, count]);\r\n            }\r\n        }, 200);\r\n    })\r\n\r\n    \r\n        // return new Promise((resolve) => {\r\n        //     if((Tree.Validate())[0]){\r\n        //         switch(opt){\r\n        //             case 1:\r\n        //                 console.log(\"Inorder Traversal\");\r\n        //                 Tree.InorderTraversal();\r\n        //                 break;\r\n        //             case 2:\r\n        //                 console.log(\"Preorder Traversal\");\r\n        //                 Tree.PreorderTraversal();\r\n        //                 break;\r\n        //             case 3:\r\n        //                 console.log(\"Postorder Traversal\");\r\n        //                 Tree.PostorderTraversal();\r\n        //                 break;\r\n        //         }\r\n\r\n        //         resolve([1,res]);\r\n\r\n        //     }else{\r\n        //         resolve([0, count]);\r\n        //     }\r\n        // });\r\n    \r\n\r\n\r\n}\r\n\r\n","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Copy.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Spinner.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\CDriver.js",["90","91","92"],"import {tree} from '../App';\r\nconst helper = require('./CGenerator.json');\r\n\r\n\r\nexport const CDriverCode = () => {\r\n\r\n    let resultantDriver = '';\r\n    // console.log(helper[0].header);\r\n    // console.log(helper[0].structure);\r\n    \r\n\r\n}","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\DummyData.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":56,"column":7,"nodeType":"99","messageId":"100","endLine":56,"endColumn":11},{"ruleId":"97","severity":1,"message":"101","line":66,"column":5,"nodeType":"99","messageId":"100","endLine":66,"endColumn":12},{"ruleId":"97","severity":1,"message":"102","line":68,"column":5,"nodeType":"99","messageId":"100","endLine":68,"endColumn":15},{"ruleId":"97","severity":1,"message":"103","line":70,"column":5,"nodeType":"99","messageId":"100","endLine":70,"endColumn":23},{"ruleId":"97","severity":1,"message":"104","line":82,"column":10,"nodeType":"99","messageId":"100","endLine":82,"endColumn":24},{"ruleId":"97","severity":1,"message":"105","line":82,"column":26,"nodeType":"99","messageId":"100","endLine":82,"endColumn":43},{"ruleId":"97","severity":1,"message":"106","line":85,"column":10,"nodeType":"99","messageId":"100","endLine":85,"endColumn":15},{"ruleId":"107","severity":1,"message":"108","line":102,"column":17,"nodeType":"99","messageId":"109","endLine":102,"endColumn":24},{"ruleId":"97","severity":1,"message":"110","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"112","line":115,"column":17,"nodeType":"113","messageId":"114","endLine":128,"endColumn":18},{"ruleId":"97","severity":1,"message":"115","line":1,"column":9,"nodeType":"99","messageId":"100","endLine":1,"endColumn":13},{"ruleId":"97","severity":1,"message":"116","line":2,"column":7,"nodeType":"99","messageId":"100","endLine":2,"endColumn":13},{"ruleId":"97","severity":1,"message":"117","line":7,"column":9,"nodeType":"99","messageId":"100","endLine":7,"endColumn":24},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'root' is assigned a value but never used.","Identifier","unusedVar","'nodeIds' is assigned a value but never used.","'treeheight' is assigned a value but never used.","'currentHeightNodes' is assigned a value but never used.","'nullVisibility' is assigned a value but never used.","'setNullVisibility' is assigned a value but never used.","'dummy' is assigned a value but never used.","no-use-before-define","'element' was used before it was defined.","usedBeforeDefined","'Button' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'tree' is defined but never used.","'helper' is assigned a value but never used.","'resultantDriver' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
[{"D:\\___TransferredFromMusic\\01-starting-project\\src\\index.js":"1","D:\\___TransferredFromMusic\\01-starting-project\\src\\App.js":"2","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Navbar.js":"3","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeParentBody.js":"4","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeRow.js":"5","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNodePair.js":"6","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNode.js":"7","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Button.js":"8","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeSandwich.js":"9","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\Line.js":"10","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Message.js":"11","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Dashboard.js":"12","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\UserConsole.js":"13","D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\TreeMethods.js":"14","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Copy.js":"15","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Spinner.js":"16","D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\CDriver.js":"17","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\DummyData.js":"18","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\MenuIcon.js":"19","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\Footer.js":"20","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\InstagramIcon.js":"21","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Checkbox.js":"22","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Editor.js":"23","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\CLanguageIcon.js":"24","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\CPPLanguageIcon.js":"25","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\GoLanguageIcon.js":"26","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\JSLangaugeIcon.js":"27","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Locked.js":"28"},{"size":169,"mtime":1643978355507,"results":"29","hashOfConfig":"30"},{"size":9557,"mtime":1648533257281,"results":"31","hashOfConfig":"30"},{"size":911,"mtime":1648062434206,"results":"32","hashOfConfig":"30"},{"size":326,"mtime":1644935342326,"results":"33","hashOfConfig":"30"},{"size":937,"mtime":1646059411151,"results":"34","hashOfConfig":"30"},{"size":1178,"mtime":1646703909015,"results":"35","hashOfConfig":"30"},{"size":535,"mtime":1646927290612,"results":"36","hashOfConfig":"30"},{"size":320,"mtime":1645940960748,"results":"37","hashOfConfig":"30"},{"size":534,"mtime":1644935342327,"results":"38","hashOfConfig":"30"},{"size":5007,"mtime":1645945398035,"results":"39","hashOfConfig":"30"},{"size":226,"mtime":1645944036579,"results":"40","hashOfConfig":"30"},{"size":4091,"mtime":1648527693596,"results":"41","hashOfConfig":"30"},{"size":968,"mtime":1648264761205,"results":"42","hashOfConfig":"30"},{"size":4466,"mtime":1647962295466,"results":"43","hashOfConfig":"30"},{"size":490,"mtime":1648062448915,"results":"44","hashOfConfig":"30"},{"size":181,"mtime":1646927769917,"results":"45","hashOfConfig":"30"},{"size":239,"mtime":1647969752528,"results":"46","hashOfConfig":"30"},{"size":4827,"mtime":1648062441079,"results":"47","hashOfConfig":"30"},{"size":1035,"mtime":1648527638394,"results":"48","hashOfConfig":"30"},{"size":445,"mtime":1648534083833,"results":"49","hashOfConfig":"30"},{"size":4973,"mtime":1648534087052,"results":"50","hashOfConfig":"30"},{"size":235,"mtime":1648476920931,"results":"51","hashOfConfig":"30"},{"size":3743,"mtime":1648616808297,"results":"52","hashOfConfig":"30"},{"size":1500,"mtime":1648556169860,"results":"53","hashOfConfig":"30"},{"size":1665,"mtime":1648556807604,"results":"54","hashOfConfig":"30"},{"size":3832,"mtime":1648636311609,"results":"55","hashOfConfig":"30"},{"size":902,"mtime":1648561999186,"results":"56","hashOfConfig":"30"},{"size":616,"mtime":1648615554842,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"11cymbo",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\___TransferredFromMusic\\01-starting-project\\src\\index.js",[],["121","122"],"D:\\___TransferredFromMusic\\01-starting-project\\src\\App.js",["123","124","125","126","127","128","129","130"],"import React, { useState, useRef } from 'react';\r\nimport Navbar from './components/UI/Navbar';\r\nimport TreeParentBody from './components/TreeStructure/TreeParentBody';\r\nimport TreeRow from './components/TreeStructure/TreeRow';\r\nimport TreeSandwich from './components/TreeStructure/TreeSandwich';\r\nimport Message from './components/UI/Message';\r\nimport Dashboard from './components/UI/Dashboard';\r\nimport UserConsole from './components/UI/UserConsole';\r\nimport {func} from './Logic/TreeMethods'\r\nimport { CDriverCode } from './Logic/CDriver';\r\nimport DummyData from './components/UI/DummyData';\r\nimport Footer from './components/TreeStructure/Footer';\r\nimport Editor from './components/UI/Editor';\r\n\r\n\r\n// import { ThemeConsumer } from 'styled-components';\r\n// import classes from './TreeNodePair.module.css';\r\n\r\n\r\n\r\n\r\nexport let tree = {\r\n  'node-0-0': { parent: null, show: true, value: 0, left: '1-0', right: '1-1', error: 0 },\r\n    'node-1-0': { parent: '0-0', show: true, value: 0,  left: '2-0',  right: '2-1', error: 0 },\r\n    'node-1-1': { parent: '0-0', show: true, value: 0,  left: '2-2',  right: '2-3', error: 0 },\r\n    'node-2-0': { parent: '1-0', show: true, value: 0,  left: '3-0',  right: '3-1', error: 0 },\r\n    'node-2-1': { parent: '1-0', show: true, value: 0,  left: '3-2',  right: '3-3', error: 0 },\r\n    'node-2-2': { parent: '1-1', show: true, value: 0,  left: '3-4',  right: '3-5', error: 0 },\r\n    'node-2-3': { parent: '1-1', show: true, value: 0,  left: '3-6',  right: '3-7', error: 0 },\r\n    'node-3-0': { parent: '2-0', show: true, value: 0,  left: '4-0',  right: '4-1', error: 0 },\r\n    'node-3-1': { parent: '2-0', show: true, value: 0,  left: '4-2',  right: '4-3', error: 0 },\r\n    'node-3-2': { parent: '2-1', show: true, value: 0,  left: '4-4',  right: '4-5', error: 0 },\r\n    'node-3-3': { parent: '2-1', show: true, value: 0,  left: '4-6',  right: '4-7', error: 0 },\r\n    'node-3-4': { parent: '2-2', show: true, value: 0,  left: '4-8',  right: '4-9', error: 0 },\r\n    'node-3-5': { parent: '2-2', show: true, value: 0, left: '4-10', right: '4-11', error: 0 },\r\n    'node-3-6': { parent: '2-3', show: true, value: 0, left: '4-12', right: '4-13', error: 0 },\r\n    'node-3-7': { parent: '2-3', show: true, value: 0, left: '4-14', right: '4-15', error: 0 },\r\n    'node-4-0': { parent: '3-0', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-1': { parent: '3-0', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-2': { parent: '3-1', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-3': { parent: '3-1', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-4': { parent: '3-2', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-5': { parent: '3-2', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-6': { parent: '3-3', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-7': { parent: '3-3', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-8': { parent: '3-4', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-9': { parent: '3-4', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-10': { parent: '3-5', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-11': { parent: '3-5', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-12': { parent: '3-6', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-13': { parent: '3-6', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-14': { parent: '3-7', show: true, value: 0, left: null, right: null, error: 0 },\r\n    'node-4-15': { parent: '3-7', show: true, value: 0, left: null, right: null }\r\n  }\r\n  \r\n  let indices = ['node-1-0', 'node-1-1', 'node-2-0', 'node-2-1', 'node-2-2', 'node-2-3', 'node-3-0', 'node-3-1', 'node-3-2', 'node-3-3', 'node-3-4', 'node-3-5', 'node-3-6', 'node-3-7', 'node-4-0', 'node-4-1', 'node-4-2', 'node-4-3', 'node-4-4', 'node-4-5', 'node-4-6', 'node-4-7', 'node-4-8', 'node-4-9', 'node-4-10', 'node-4-11', 'node-4-12', 'node-4-13', 'node-4-14', 'node-4-15'];\r\n  \r\n  let root = {\r\n    parent : null,\r\n    id : 'node-0-0',\r\n    value : 0,\r\n    left : '00',\r\n    right : '01'\r\n  }\r\nlet rootId = 'node-0-0';\r\nlet lastUnbalancedNode = null;\r\n\r\nlet nodeIds = ['node1'];\r\n\r\nlet treeheight = 1;\r\n// let nodeRank = 0;\r\nlet currentHeightNodes = [];\r\nlet expanded = false;\r\n\r\n\r\nconst App = () => {\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  // const [rows, setRows] = useState([0,1]);\r\n  const [nullState, setNullState] = useState(\"Hide\");\r\n  const [nullVisibility, setNullVisibility] = useState('');\r\n  const [consoleMessage, setConsoleMessage] = useState([0,'']);\r\n  const [height, setHeight] = useState([0,1]);\r\n  const [dummy, setDummy] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const dashRef = useRef();\r\n  let currentPair = [0,1];\r\n  let  nodes = 0;\r\n  console.log(\"Hi\");\r\n  // const [currentPair, setCurrentPair] = useState([0,1]);\r\n  // const [tree, setTree] = useState([]);\r\n  \r\n  \r\n  // let tree = [];\r\n  \r\n  \r\n  \r\n  // const left = 0;\r\n\r\n  if(lastUnbalancedNode){\r\n    // console.log(lastUnbalancedNode)\r\n    // console.log(element);\r\n    let element = document.querySelector(`input[data-id=${indices[lastUnbalancedNode]}]`);\r\n    element.style.background = 'red'; \r\n  }\r\n\r\n\r\n  const swap = (i,j) => {\r\n    if(i<j){\r\n      // console.log(i,j);\r\n      const temp = tree[indices[j]].value;\r\n      console.log('temp', temp);\r\n      tree[indices[j]].value =  tree[indices[i]].value;\r\n      tree[indices[i]].value = temp;\r\n      swap(i+1, j-1);\r\n    }\r\n  }\r\n  \r\n  \r\n  const invertBinaryTree = () => {\r\n    expandSidebar(-100);\r\n    // console.log(tree);\r\n    for(let i=0; i<(height.length); i+=2){\r\n      swap(i,(2*i)+1);\r\n    }\r\n    console.log(tree);\r\n    setDummy(prevState =>  !prevState);\r\n    \r\n    // return App();\r\n  }\r\n  \r\n\r\n  const setId = () => {\r\n    let a = indices[currentPair[0]]; \r\n    let b = indices[currentPair[1]];\r\n    // console.log(tree[a], tree[b]);\r\n    // console.log(a,b);\r\n    let res = [a, b, tree[a].show, tree[b].show, tree[a].value, tree[b].value];\r\n    currentPair = currentPair.map(x => x+2);\r\n    nodes+=2\r\n    // console.log(\"Current Pair \" ,currentPair);\r\n    // console.log(res);\r\n    return res;\r\n  }\r\n  \r\n\r\n  const addRow = () => {\r\n    console.log(\"Adding Row\");\r\n    expandSidebar(-100);\r\n    setHeight(prevState => [...height, height.at(height.length-1)*2]);\r\n    currentPair = [0,1];\r\n\r\n\r\n  }\r\n\r\n  const toggleNullState = () => {\r\n    expandSidebar(-100);\r\n    let newState = nullState===\"Show\" ? \"Hide\" : \"Show\";\r\n    for(let i=0; i<nodes; i++){\r\n      if(!tree[indices[i]].value){\r\n        tree[indices[i]].show = false;\r\n      }\r\n    }\r\n    setNullState(newState);\r\n    // console.log(tree);\r\n\r\n  \r\n  }\r\n\r\n  const inputChangeHandler = (event) => {\r\n    // console.log(event.target.value);\r\n    let x = event.target;\r\n    // console.log(x.dataset.id);\r\n    tree[x.dataset.id].value = event.target.value;\r\n    // console.log(tree.map(i => i.value));\r\n    \r\n  }\r\n\r\n  const treeActionFunction = async(opt) => {\r\n    // console.log(\"Hey\");\r\n    expandSidebar(-100);\r\n    setLoading(true);\r\n    let res = await func(opt);\r\n    console.log(\"result\",);\r\n    if(!res[0]){\r\n      setLoading(false);\r\n      setConsoleMessage([0, \"Please Balance the Tree !!!\"]);\r\n      lastUnbalancedNode = res[1]-1;\r\n      // tree[indices[lastUnbalancedNode]].error = 1;\r\n      console.log(indices[lastUnbalancedNode]);\r\n      let element = document.querySelector(`input[data-id=${indices[lastUnbalancedNode]}]`);\r\n      // element.style.background = 'red';\r\n      element.classList.add('errorNode');\r\n      // console.log(element);\r\n      \r\n      \r\n      \r\n    }else{\r\n      setLoading(false);\r\n      // tree[indices[lastUnbalancedNode]].error = 0;\r\n      res[1] = res[1].toString();\r\n      setConsoleMessage(res);\r\n      // document.querySelector(`div[data-id='${indices[lastUnbalancedNode]}']`).style.border = '0px';\r\n    }\r\n  }\r\n\r\n  const expandSidebar = (newWidth) => {\r\n    dashRef.current.style.transform = `translateX(${newWidth}%)`;\r\n    console.log(newWidth ? \"Slid out\" : \"Slid in\");\r\n  }\r\n\r\n\r\n\r\n  CDriverCode();\r\n\r\n  return (\r\n    <>\r\n      <Navbar expandSidebar={expandSidebar} addRow={addRow} toggleNullState={toggleNullState} nullState={nullState} invertBinaryTree={invertBinaryTree}/>\r\n      {/* <Dashboard dashRef={dashRef} expanded={expanded} treeActionFunction={treeActionFunction} addRow={addRow} toggleNullState={toggleNullState} nullState={nullState} invertBinaryTree={invertBinaryTree}/> */}\r\n      <Dashboard dashRef={dashRef} expanded={expanded} nullState={nullState}  addRow={addRow} actions={[addRow,() => {treeActionFunction(1)},() => {treeActionFunction(2)},() => {treeActionFunction(3)}, invertBinaryTree, toggleNullState]}/>\r\n\r\n      <UserConsole message={consoleMessage} loading={loading}/>\r\n      <TreeParentBody>\r\n        <Message message={'Please provide non-zero values for each node (Nodes with 0 value will be treated as null) and also do balance the Binary Tree'}/>\r\n        {/* <TreeRow></TreeRow> */}\r\n        {height.map(x => <><TreeRow rootValue={tree['node-0-0'].value} setId={setId} inputChangeHandler={inputChangeHandler} key={Math.random()*1000}  pairs={x} rootId={rootId}/><TreeSandwich pairs={x} endif={height.at(height.length-1)}/></>)}\r\n      </TreeParentBody>\r\n      <Editor/>\r\n      {/* <DummyData/> */}\r\n      <Footer/>\r\n     \r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Navbar.js",["131"],"import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport Button from './Button';\r\nimport MenuIcon from '../Icons/MenuIcon';\r\n\r\n\r\n\r\nconst Navbar = (props) => {\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className={classes.navbar}>\r\n            {/* <span  onClick={expandSidebar}><MenuIcon/></span> */}\r\n            <MenuIcon expandSidebar={props.expandSidebar}/>\r\n                <span className={classes.header}>Broccoli <small style={{fontSize:'0.7em'}}>by Unamed Inc</small></span>\r\n            {/* <Button type=\"button\" onClick={props.addRow}>Add new row</Button>\r\n            <Button type=\"button\" onClick={props.toggleNullState}>{props.nullState} Empty Nodes</Button>\r\n            <Button type=\"button\" onClick={props.invertBinaryTree}>Invert Binary Tree</Button> */}\r\n            </div>\r\n            \r\n        \r\n        </>\r\n    \r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default Navbar;","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeParentBody.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeRow.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNodePair.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeNode.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Button.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\TreeSandwich.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\Line.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Message.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Dashboard.js",["132","133"],"import React, {useState} from 'react';\r\nimport classes from './Dashboard.module.css';\r\nimport Button from './Button';\r\n\r\n\r\n\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [dashboardButtons, setDashboardButtons] = useState([{text:'Add a new row',  action: props.actions[0]}, \r\n    {text:'Inorder Traversal', action: props.actions[1]},\r\n    {text:'Preorder Traversal', action: props.actions[2]},\r\n    {text:'Postorder Traversal', action: props.actions[3]},\r\n    {text:'Invert Binary Tree', action: props.actions[4]}, \r\n    {text:`${props.nullState} Empty Nodes`,action: props.actions[5]}]); \r\n\r\n    const [dynamicButtonOrdering, setDynamicButtonOrdering] = useState(true);\r\n\r\n\r\n\r\n    return (\r\n        <section className={classes.dashboard} ref={props.dashRef}>\r\n          {/* style={{transform: props.expanded ? 'translateX(0%)' : 'translateX(-100%)'}}>  */}\r\n            <span className={classes.header}>DASHBOARD</span>\r\n            <div className={classes.dashboardControls}>\r\n\r\n                {/* <Button type=\"button\" onClick={props.addRow}>Add a new row</Button>\r\n                <Button type=\"button\" onClick={props.toggleNullState}>{props.nullState} Empty Nodes</Button>\r\n                <Button type=\"button\" onClick={props.invertBinaryTree}>Invert Binary Tree</Button>\r\n                \r\n\r\n               <Button type=\"button\" onClick={() => {props.treeActionFunction(1)}}>Inorder Traversal</Button>\r\n               <Button type=\"button\" onClick={() => {props.treeActionFunction(2)}}>Preorder Traversal</Button>\r\n               <Button type=\"button\" onClick={() => {props.treeActionFunction(3)}}>Postorder Traversal</Button>\r\n                 */}\r\n                \r\n                <Button type=\"button\" onClick={props.actions[0]}>Add a new row</Button>\r\n\r\n                {[...Array(6)].map((i, ind) => <Button type=\"button\" onClick={() => {\r\n                    // Reorder Array\r\n                    dashboardButtons[ind].action();\r\n                    if(dynamicButtonOrdering){\r\n                        setDashboardButtons(prevState => {\r\n                            if(ind > 0){\r\n                                return [prevState[ind]].concat(prevState.slice(0,ind)).concat(prevState.slice(ind+1,));\r\n                            }else{\r\n                                return prevState;\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                }} key={ind}> {dashboardButtons[ind].text} </Button>)}\r\n\r\n\r\n                <div className={classes.utilites}>\r\n                   <div className={classes.utility}>\r\n                        Dynamic Button ordering \r\n                        <input type=\"checkbox\" checked={dynamicButtonOrdering} onChange={() => {setDynamicButtonOrdering(prevState => prevState ? false : true)}}></input></div>\r\n                    \r\n                </div>\r\n\r\n\r\n                {/* <Button type=\"button\" onClick={props.toggleNullState}>{props.nullState} Empty Nodes</Button> */}\r\n\r\n                \r\n                {/* <span><a>Instagram</a></span> */}\r\n\r\n            \r\n                \r\n            \r\n            </div>\r\n            \r\n        </section>\r\n    );\r\n}\r\n\r\n\r\nexport default Dashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <a href=\"#userConsole\"><Button type=\"button\" onClick={() => {props.treeActionFunction(1)}}>Inorder Traversal</Button></a>\r\n<a href=\"#userConsole\"><Button type=\"button\" onClick={() => {props.treeActionFunction(2)}}>Preorder Traversal</Button></a>\r\n<a href=\"#userConsole\"><Button type=\"button\" onClick={() => {props.treeActionFunction(3)}}>Postorder Traversal</Button></a>\r\n*/}\r\n\r\n\r\n\r\n{/* <Button type=\"button\" onClick={props.addRow}>Add a new row</Button>\r\n<Button type=\"button\" onClick={props.toggleNullState}>{props.nullState} Empty Nodes</Button>\r\n<Button type=\"button\" onClick={props.invertBinaryTree}>Invert Binary Tree</Button>\r\n<Button type=\"button\" onClick={props.addRow}>Add a new row</Button>\r\n<Button type=\"button\" onClick={props.toggleNullState}>{props.nullState} Empty Nodes</Button>\r\n<Button type=\"button\" onClick={props.invertBinaryTree}>Invert Binary Tree</Button> */}","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\UserConsole.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\TreeMethods.js",["134"],"import {tree} from \"../App\";\r\n\r\nexport const func = (opt) => {\r\n    \r\n    let  nodeLeftPos, nodeRightPos, nodes = [];\r\n    let res = [];\r\n    let count = 0;\r\n    \r\n\r\n\r\n    class Node{\r\n        constructor(value){\r\n            this.value = value;\r\n            this.left = null;\r\n            this.right = null;\r\n        }\r\n    }\r\n    \r\n    class BinarySearchTree{\r\n        constructor(arr){\r\n            this.arr = arr;\r\n            this.root = new Node(arr[0]);\r\n    \r\n        \r\n        }\r\n    \r\n        Validate(node = this.root){\r\n            count++;\r\n            console.log(`Left : ${node.left.value} Right : ${node.right.value}`);\r\n            if(node.left.value < node.right.value){\r\n                this.Validate(node.left);\r\n                this.Validate(node.right);\r\n                \r\n            }else{\r\n                return [0,count];\r\n            }\r\n            return [1,1];\r\n        }\r\n\r\n        InorderTraversal(node = this.root){\r\n            \r\n            if(node.value !== 0){\r\n                this.InorderTraversal(node.left);\r\n                // console.log(node.value);\r\n                res.push(node.value);\r\n                this.InorderTraversal(node.right);\r\n            }\r\n    \r\n            \r\n        }\r\n\r\n        PostorderTraversal(node = this.root){\r\n            if(node.value !== 0){\r\n                this.PreorderTraversal(node.left);\r\n                this.PreorderTraversal(node.right);\r\n                // console.log(node.value);\r\n                res.push(node.value);\r\n            }\r\n        }\r\n\r\n        PreorderTraversal(node = this.root){\r\n            if(node.value !== 0){\r\n                // console.log(node.value);\r\n                res.push(node.value);\r\n                this.PostorderTraversal(node.left);\r\n                this.PostorderTraversal(node.right);\r\n            }\r\n        }\r\n    \r\n    \r\n        start(){\r\n            \r\n            \r\n            for(let x of this.arr.slice(1,)){\r\n                nodes.push(new Node(x));\r\n            }\r\n    \r\n            nodes = [this.root, ...nodes];\r\n    \r\n            this.root.left = nodes[1];\r\n            this.root.right = nodes[2];\r\n    \r\n            nodeLeftPos = 3;\r\n            nodeRightPos = 4;\r\n    \r\n        }\r\n    \r\n        init(){\r\n    \r\n    \r\n            let counter = 1;\r\n            while(nodeRightPos<nodes.length){\r\n                nodes[counter].left = nodes[nodeLeftPos];\r\n                nodes[counter].right = nodes[nodeRightPos];\r\n                nodeLeftPos += 2;\r\n                nodeRightPos += 2;\r\n                counter++;\r\n            }\r\n    \r\n            \r\n            \r\n        }\r\n    }\r\n    let ele = (Object.values(tree)).map(x => x.value);\r\n    \r\n    let Tree = new BinarySearchTree(ele);\r\n    Tree.start();\r\n    Tree.init();\r\n    \r\n    console.log(nodes);\r\n    \r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            if((Tree.Validate())[0]){\r\n                switch(opt){\r\n                    case 1:\r\n                        console.log(\"Inorder Traversal\");\r\n                        Tree.InorderTraversal();\r\n                        break;\r\n                    case 2:\r\n                        console.log(\"Preorder Traversal\");\r\n                        Tree.PreorderTraversal();\r\n                        break;\r\n                    case 3:\r\n                        console.log(\"Postorder Traversal\");\r\n                        Tree.PostorderTraversal();\r\n                        break;\r\n                }\r\n    \r\n                resolve([1,res]);\r\n    \r\n            }else{\r\n                resolve([0, count]);\r\n            }\r\n        }, 200);\r\n    })\r\n\r\n    \r\n        // return new Promise((resolve) => {\r\n        //     if((Tree.Validate())[0]){\r\n        //         switch(opt){\r\n        //             case 1:\r\n        //                 console.log(\"Inorder Traversal\");\r\n        //                 Tree.InorderTraversal();\r\n        //                 break;\r\n        //             case 2:\r\n        //                 console.log(\"Preorder Traversal\");\r\n        //                 Tree.PreorderTraversal();\r\n        //                 break;\r\n        //             case 3:\r\n        //                 console.log(\"Postorder Traversal\");\r\n        //                 Tree.PostorderTraversal();\r\n        //                 break;\r\n        //         }\r\n\r\n        //         resolve([1,res]);\r\n\r\n        //     }else{\r\n        //         resolve([0, count]);\r\n        //     }\r\n        // });\r\n    \r\n\r\n\r\n}\r\n\r\n","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Copy.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Spinner.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\Logic\\CDriver.js",["135","136","137"],"import {tree} from '../App';\r\nconst helper = require('./CGenerator.json');\r\n\r\n\r\nexport const CDriverCode = () => {\r\n\r\n    let resultantDriver = '';\r\n    // console.log(helper[0].header);\r\n    // console.log(helper[0].structure);\r\n    \r\n\r\n}","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\DummyData.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\MenuIcon.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\TreeStructure\\Footer.js",["138"],"import React from 'react';\r\nimport InstagramIcon from '../Icons/InstagramIcon';\r\nimport classes from './Footer.module.css';\r\n\r\n\r\nconst Footer = (props) => {\r\n\r\n\r\n    return(<section className={classes.footer}>\r\n        <div className={classes.icons}>\r\n            {/* <a href=\"https://www.instagram.com/depth_exceeded/\" className={classes.icon}><InstagramIcon/></a> */}\r\n        </div>\r\n\r\n    </section>)\r\n\r\n\r\n    \r\n}\r\n\r\n\r\nexport default Footer;","D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\InstagramIcon.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Checkbox.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\UI\\Editor.js",["139","140"],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\CLanguageIcon.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\CPPLanguageIcon.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\GoLanguageIcon.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\JSLangaugeIcon.js",[],"D:\\___TransferredFromMusic\\01-starting-project\\src\\components\\Icons\\Locked.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":11,"column":8,"nodeType":"147","messageId":"148","endLine":11,"endColumn":17},{"ruleId":"145","severity":1,"message":"149","line":58,"column":7,"nodeType":"147","messageId":"148","endLine":58,"endColumn":11},{"ruleId":"145","severity":1,"message":"150","line":68,"column":5,"nodeType":"147","messageId":"148","endLine":68,"endColumn":12},{"ruleId":"145","severity":1,"message":"151","line":70,"column":5,"nodeType":"147","messageId":"148","endLine":70,"endColumn":15},{"ruleId":"145","severity":1,"message":"152","line":72,"column":5,"nodeType":"147","messageId":"148","endLine":72,"endColumn":23},{"ruleId":"145","severity":1,"message":"153","line":85,"column":10,"nodeType":"147","messageId":"148","endLine":85,"endColumn":24},{"ruleId":"145","severity":1,"message":"154","line":85,"column":26,"nodeType":"147","messageId":"148","endLine":85,"endColumn":43},{"ruleId":"145","severity":1,"message":"155","line":88,"column":10,"nodeType":"147","messageId":"148","endLine":88,"endColumn":15},{"ruleId":"145","severity":1,"message":"156","line":3,"column":8,"nodeType":"147","messageId":"148","endLine":3,"endColumn":14},{"ruleId":"157","severity":1,"message":"158","line":89,"column":1,"nodeType":"159","messageId":"160","endLine":92,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":96,"column":1,"nodeType":"159","messageId":"160","endLine":101,"endColumn":87},{"ruleId":"161","severity":1,"message":"162","line":115,"column":17,"nodeType":"163","messageId":"164","endLine":128,"endColumn":18},{"ruleId":"145","severity":1,"message":"165","line":1,"column":9,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},{"ruleId":"145","severity":1,"message":"166","line":2,"column":7,"nodeType":"147","messageId":"148","endLine":2,"endColumn":13},{"ruleId":"145","severity":1,"message":"167","line":7,"column":9,"nodeType":"147","messageId":"148","endLine":7,"endColumn":24},{"ruleId":"145","severity":1,"message":"168","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":21},{"ruleId":"145","severity":1,"message":"169","line":1,"column":45,"nodeType":"147","messageId":"148","endLine":1,"endColumn":52},{"ruleId":"161","severity":1,"message":"162","line":39,"column":9,"nodeType":"163","messageId":"164","endLine":56,"endColumn":14},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'DummyData' is defined but never used.","Identifier","unusedVar","'root' is assigned a value but never used.","'nodeIds' is assigned a value but never used.","'treeheight' is assigned a value but never used.","'currentHeightNodes' is assigned a value but never used.","'nullVisibility' is assigned a value but never used.","'setNullVisibility' is assigned a value but never used.","'dummy' is assigned a value but never used.","'Button' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'tree' is defined but never used.","'helper' is assigned a value but never used.","'resultantDriver' is assigned a value but never used.","'InstagramIcon' is defined but never used.","'useMemo' is defined but never used.","no-global-assign","no-unsafe-negation"]